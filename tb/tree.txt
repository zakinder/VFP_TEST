// +------------------------------------------------------------------------------------+
// |TEST                                                                                |
// |------------------------------------------------------------------------------------|
// |+----------------------------------------------------------------------------------+|
// ||ENV                                                                               ||
// ||----------------------------------------------------------------------------------||
// ||+--------------------------------------------------------------------------------+||
// |||AGENT                                                                           |||
// |||--------------------------------------------------------------------------------|||
// |||  +--------------+                                                              |||
// |||  |SEQUENCE      |   +---------+   +------+                       +-------+     |||
// |||  +--------------+-->|SEQUENCER|-->|DRIVER|<-+                 +->|MONITOR|     |||
// |||  |SEQUENCE_ITEM |   +---------+   +------+  |   +---------+   |  +-------+     |||
// |||  +--------------+                           |-->|INTERFACE|-->|                |||
// |||                                                 +-----|---+                    |||
// ||+-------------------------------------------------------|------------------------+||
// |+--------------------------------------------------------|-------------------------+|
// +---------------------------------------------------------|--------------------------+
//                                                           |  +------+   +---+  +-----+
//                                                           |->|DUT_IF|-->|DUT|->|LOGIC|
//                                                              +------+   +---+  +-----+
//
  
//Test class :Generate stimulus from sequence to driver through sequencer then from uvm_driver will drive values stored in sequence_item to dut(interface).
//The values that a driver will drive into the DUT are stored in a sequence_item object. 
//This object is created, and its values generated, by a sequence. 
//The driver needs to synchronize with the sequence for when the driver obtains sequence_item handles.
//This synchronization is done with a pair of methods, get_next_item() and item_done(). 
//These methods are defined as part of the driver’s TLM port, which is connected to a corresponding sequencer. 
//All that the Environment Writer needs to know is that calling get_next_item() will block the execution of the driver and wait for a sequence to create a sequence_item object.
//TEST: random.start(jb_env.jb_agent.jb_seqr);
//1. The test class (from the Test Writer) raises its objection flag and calls a sequence’s start() method, which invokes the sequence body() method. The start() method blocks (waits at that point) until the body() method exits.
//SEQUENCE: start_item(tx);
//2. The sequence body() method calls a start_item() method. start_item() blocks (waits) until the driver asks for a transaction (a sequence_item object handle).[]
//DRIVER: seq_item_port.get_next_item(tx);
//3. The driver calls the seq_item_port.get_next_item() method to request (pull) a transaction. The driver then blocks (waits) until a transaction is received.
//SEQUENCE: finish_item(tx);
//4. The sequence generates the transaction values and calls finish_item(), which sends the transaction to the driver. The sequence then blocks (waits) until the driver is finished with that transaction.
//DRIVER: seq_item_port.item_done();
//5. The driver assigns the transaction values to the interface variables, and then calls the seq_item_port.item_done() method to unblock the sequence. The sequence can then repeat steps 2 through 5 to generate additional stimulus.
//6. After the sequence has completed generating stimulus, the sequence body() exits, which unblocks the test’s start() method. The test will then continue with its next statements, which includes dropping its objection flag and allowing the run_phase to end.


+---agent //RECEIVES TRANSACTION FROM SEQUENCER AND DRIVES DUT
|   |   axi4_stream_master_agent.svh
|   |   axi4_stream_master_agent_pkg.sv
|   |   axi4_stream_slave_agent.svh
|   |   axi4_stream_slave_agent_pkg.sv
|   |   axi_lite_agent.svh
|   |   axi_lite_agent_pkg.sv
|   |   d5m_camera_agent.svh
|   |   d5m_camera_agent_pkg.sv
|   |   rgb_agent.svh
|   |   rgb_agent_pkg.sv
|   |   template_agent.svh
|   |   template_agent_pkg.sv
|   |   
|   +---configuration
|   |       axi4_stream_agents_config.svh
|   |       axi4_stream_config.svh
|   |       axi_lite_config.svh
|   |       d5m_camera_config.svh
|   |       rgb_config.svh
|   |       template_config.svh
|   |       
|   +---coverage MODULES THAT PROVIDES FUNCTIONAL COVERAGE //SCOREBOARD MODULES THAT CHECKS THE RESULTS
|   |       axi_lite_coverage.svh
|   |       d5m_camera_coverage.svh
|   |       rgb_fc_coverage.svh
|   |       rgb_sb_coverage.svh
|   |       template_scoreboard.svh
|   |       
|   +---driver// RECEIVES TRANSACTION FROM SEQUENCER AND DRIVES DUT
|   |       axi4_stream_master_driver.svh
|   |       axi4_stream_slave_driver.svh
|   |       axi_lite_driver.svh
|   |       d5m_camera_driver.svh
|   |       rgb_driver.svh
|   |       template_driver.svh
|   |       
|   +---monitor
|   |       axi4_module_monitor.svh
|   |       axi4_stream_module_monitor.svh
|   |       axi4_stream_monitor.svh
|   |       axi_lite_monitor.svh
|   |       d5m_camera_monitor.svh
|   |       rgb_monitor.svh
|   |       template_monitor_fdut.svh
|   |       template_monitor_predict.svh
|   |       
|   +---sequence //ENCAPSULATES TRANSACTIONS TO BE PROCESSED BY DRIVER
|   |       axi4_stream_master_sequence.svh
|   |       axi_lite_sequence.svh
|   |       d5m_camera_base_seq.svh
|   |       d5m_camera_image_file_sequence.svh
|   |       d5m_camera_image_pattern_sequence.svh
|   |       d5m_camera_sequence.svh
|   |       d5m_camera_sequencer.svh //EXECUTES SEQUENCE AND PASSES TRANSACTIONS TO DRIVER
|   |       rgb_sequence.svh
|   |       template_sequence.svh
|   |       
|   \---transaction //ENCAPSULATES STIMULUS DATA STRUCTURE
|           axi4_stream_packet_transaction.svh
|           axi4_stream_valid_cycle.svh
|           axi_lite_transaction.svh
|           d5m_camera_transaction.svh
|           rgb_transaction.svh
|           tp_transaction.svh
|           
+---env //ENCAPSULATES ALL COMPONENTS OF TESTBENCH
|   +---axi4_lite_env
|   |       axi4_lite_env.sv
|   |       axi4_lite_pkg.sv
|   |       
|   +---axi4_stream_env
|   |       axi4_stream_env.sv
|   |       axi4_stream_pkg.sv
|   |       
|   +---d5m_camera_env
|   |       d5m_camera_env.sv
|   |       d5m_camera_pkg.sv
|   |       
|   +---rgb_env
|   |       rgb_env.sv
|   |       rgb_pkg.sv
|   |       
|   +---system_env
|   |       axi4_lite_env.sv
|   |       axi4_stream_env.sv
|   |       rgb_env.sv
|   |       system_env.sv
|   |       system_pkg.sv
|   |       template_env.sv
|   |       
|   \---template_env
|           template_env.sv
|           template_pkg.sv
|           
+---interfaces
|       adder.sv
|       axi4l_if.sv
|       axi4s_if.sv
|       d5m_camera_if.sv
|       rgbAssertion_dut.sv
|       rgb_color.sv
|       rgb_if.sv
|       tp_if.sv
|       vfp_config_axi4l_dut.sv
|       vfp_config_axi4s_dut.sv
|       vfp_config_d5m_camera_dut.sv
|       vfp_config_dut.sv
|       
+---test //MODULES THAT GENERATES THE TEST STIMULUS.ENCAPSULATES ENVIRONMENT OBJECTS.SETS TEST-LEVEL CONFIGURATION/MODIFICATION
|   +---axi4_lite
|   |       axi_lite_test.sv
|   |       
|   +---axi4_stream
|   |       axi4_stream_test.sv
|   |       
|   +---d5m_camera
|   |       d5m_camera_image_file_test.sv
|   |       d5m_camera_image_pattern_test.sv
|   |       d5m_camera_test.sv
|   |       
|   +---rgb
|   |       rgb_test.sv
|   |       
|   \---template
|           template_test.sv
|           
\---top
    +---axi4_lite_top
    |       top.sv
    |       
    +---axi4_stream_top
    |       top.sv
    |       
    +---d5m_camera_top
    |       top.sv
    |       
    +---rgb_top
    |       top.sv
    |       
    +---system_top
    |       top.sv
    |       
    \---template_top
            top.sv
            
